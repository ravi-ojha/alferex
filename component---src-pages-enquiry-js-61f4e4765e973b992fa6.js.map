{"version":3,"sources":["webpack:///./src/components/ContactForm.js","webpack:///./src/pages/enquiry.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/BreadcrumbDivider.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/BreadcrumbSection.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/Breadcrumb.js"],"names":["ContactForm","render","react_default","a","createElement","Segment","basic","style","padding","Container","Header","as","textAlign","fontWeight","fontSize","className","title","src","width","height","frameBorder","marginHeight","marginWidth","React","PureComponent","Enquiry","components_Header","this","props","background","marginBottom","Breadcrumb","size","Section","link","gatsby_browser_entry","to","Divider","icon","active","components_ContactForm","Footer","BreadcrumbDivider","children","content","classes","classnames_default","rest","Object","getUnhandledProps","ElementType","getElementType","isNil_default","extends_default","lib","isNil","Icon","create","defaultProps","objectSpread_default","autoGenerateKey","handledProps","propTypes","factories","Breadcrumb_BreadcrumbDivider","BreadcrumbSection_BreadcrumbSection","_Component","BreadcrumbSection","_getPrototypeOf2","_this","classCallCheck_default","_len","arguments","length","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","apply","concat","defineProperty_default","assertThisInitialized_default","_this$props","onClick","e","invoke_default","inherits_default","createClass_default","key","value","_this$props2","href","classNameBuilders","computeElementType","handleClick","react","divider","sections","childElements","each_default","section","index","breadcrumbElement","push","__webpack_exports__"],"mappings":"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","file":"component---src-pages-enquiry-js-61f4e4765e973b992fa6.js","sourcesContent":["/**\n *\n * ContactForm\n *\n */\n\nimport React from 'react';\nimport {\n  Header, Segment, Container,\n} from 'semantic-ui-react';\n\nimport '../../semantic/semantic-dist/semantic.css';\nimport '../assets/custom.css';\n\n\nclass ContactForm extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function\n  render() {\n    return (\n      <Segment basic style={{ padding: '5em 0' }}>\n        <Container>\n          <Header as=\"h1\" textAlign=\"center\" style={{ fontWeight: '400', fontSize: '1.6em' }} className=\"about-header\">\n            Send us a message and we will get back to you within 24 hours!\n          </Header>\n          <Segment basic>\n            <iframe\n              title=\"contact-us\"\n              src=\"https://docs.google.com/forms/d/e/1FAIpQLSfgAYsvaamzHqgIpzQQOfhJBNoiAKWZZJEuXFt7Xt32ONya4Q/viewform?embedded=true\"\n              width=\"100%\"\n              height=\"1031\"\n              frameBorder=\"0\"\n              marginHeight=\"0\"\n              marginWidth=\"0\"\n            >\n              Loading...\n            </iframe>\n          </Segment>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport default ContactForm;","import React from 'react';\nimport { Link } from 'gatsby';\nimport { Segment, Breadcrumb, Container, Header } from 'semantic-ui-react';\n\n\nimport SiteHeader from '../components/Header';\nimport Footer from '../components/Footer';\nimport ContactForm from '../components/ContactForm';\nimport '../../semantic/semantic-dist/semantic.css';\nimport '../assets/custom.css';\n\nclass Enquiry extends React.PureComponent {\n  render() {\n\n    return (\n      <div>\n        <SiteHeader {...this.props} />\n        <Segment basic style={{ background: '#ffffff' }}>\n          <Container>\n            <Segment basic style={{ marginBottom: '0' }}>\n              <Breadcrumb size=\"large\">\n                <Breadcrumb.Section link><Link to=\"/\">Home</Link></Breadcrumb.Section>\n                <Breadcrumb.Divider icon=\"right chevron\" />\n                <Breadcrumb.Section active>Enquiry</Breadcrumb.Section>\n              </Breadcrumb>\n            </Segment>\n            <Header as=\"h1\" textAlign=\"center\" className=\"about-header alferex-header\">\n              General Enquiry\n            </Header>\n            <ContactForm />\n          </Container>\n        </Segment>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Enquiry;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A divider sub-component for Breadcrumb component.\n */\n\nfunction BreadcrumbDivider(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(BreadcrumbDivider, props);\n  var ElementType = getElementType(BreadcrumbDivider, props);\n\n  if (!_isNil(icon)) {\n    return Icon.create(icon, {\n      defaultProps: _objectSpread({}, rest, {\n        className: classes\n      }),\n      autoGenerateKey: false\n    });\n  }\n\n  if (!_isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? '/' : children);\n}\n\nBreadcrumbDivider.handledProps = [\"as\", \"children\", \"className\", \"content\", \"icon\"];\nBreadcrumbDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `Icon` component with `divider` class instead of a `div`. */\n  icon: customPropTypes.itemShorthand\n} : {};\nBreadcrumbDivider.create = createShorthandFactory(BreadcrumbDivider, function (icon) {\n  return {\n    icon: icon\n  };\n});\nexport default BreadcrumbDivider;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType, useKeyOnly } from '../../lib';\n/**\n * A section sub-component for Breadcrumb component.\n */\n\nvar BreadcrumbSection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BreadcrumbSection, _Component);\n\n  function BreadcrumbSection() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BreadcrumbSection);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BreadcrumbSection)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeElementType\", function () {\n      var _this$props = _this.props,\n          link = _this$props.link,\n          onClick = _this$props.onClick;\n      if (link || onClick) return 'a';\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      return _invoke(_this.props, 'onClick', e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(BreadcrumbSection, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          active = _this$props2.active,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          content = _this$props2.content,\n          href = _this$props2.href;\n      var classes = cx(useKeyOnly(active, 'active'), 'section', className);\n      var rest = getUnhandledProps(BreadcrumbSection, this.props);\n      var ElementType = getElementType(BreadcrumbSection, this.props, this.computeElementType);\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n  }]);\n\n  return BreadcrumbSection;\n}(Component);\n\n_defineProperty(BreadcrumbSection, \"handledProps\", [\"active\", \"as\", \"children\", \"className\", \"content\", \"href\", \"link\", \"onClick\"]);\n\nexport { BreadcrumbSection as default };\nBreadcrumbSection.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Style as the currently active section. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: customPropTypes.every([customPropTypes.disallow(['link']), PropTypes.string]),\n\n  /** Render as an `a` tag instead of a `div`. */\n  link: customPropTypes.every([customPropTypes.disallow(['href']), PropTypes.bool]),\n\n  /**\n   * Called on click. When passed, the component will render as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func\n} : {};\nBreadcrumbSection.create = createShorthandFactory(BreadcrumbSection, function (content) {\n  return {\n    content: content,\n    link: true\n  };\n});","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _each from \"lodash/each\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getUnhandledProps, getElementType, SUI } from '../../lib';\nimport BreadcrumbDivider from './BreadcrumbDivider';\nimport BreadcrumbSection from './BreadcrumbSection';\n/**\n * A breadcrumb is used to show hierarchy between content.\n */\n\nfunction Breadcrumb(props) {\n  var children = props.children,\n      className = props.className,\n      divider = props.divider,\n      icon = props.icon,\n      sections = props.sections,\n      size = props.size;\n  var classes = cx('ui', size, 'breadcrumb', className);\n  var rest = getUnhandledProps(Breadcrumb, props);\n  var ElementType = getElementType(Breadcrumb, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var childElements = [];\n\n  _each(sections, function (section, index) {\n    // section\n    var breadcrumbElement = BreadcrumbSection.create(section);\n    childElements.push(breadcrumbElement); // divider\n\n    if (index !== sections.length - 1) {\n      var key = \"\".concat(breadcrumbElement.key, \"_divider\") || JSON.stringify(section);\n      childElements.push(BreadcrumbDivider.create({\n        content: divider,\n        icon: icon,\n        key: key\n      }));\n    }\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childElements);\n}\n\nBreadcrumb.handledProps = [\"as\", \"children\", \"className\", \"divider\", \"icon\", \"sections\", \"size\"];\nBreadcrumb.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content of the Breadcrumb.Divider. */\n  divider: customPropTypes.every([customPropTypes.disallow(['icon']), customPropTypes.contentShorthand]),\n\n  /** For use with the sections prop. Render as an `Icon` component with `divider` class instead of a `div` in\n   *  Breadcrumb.Divider. */\n  icon: customPropTypes.every([customPropTypes.disallow(['divider']), customPropTypes.itemShorthand]),\n\n  /** Shorthand array of props for Breadcrumb.Section. */\n  sections: customPropTypes.collectionShorthand,\n\n  /** Size of Breadcrumb. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium'))\n} : {};\nBreadcrumb.Divider = BreadcrumbDivider;\nBreadcrumb.Section = BreadcrumbSection;\nexport default Breadcrumb;"],"sourceRoot":""}