{"version":3,"sources":["webpack:///./src/pages/contact-us.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/BreadcrumbDivider.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/BreadcrumbSection.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/Breadcrumb.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Table/TableBody.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Table/TableCell.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Table/TableHeader.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Table/TableFooter.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Table/TableHeaderCell.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Table/TableRow.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Table/Table.js","webpack:///./src/components/ContactDetails.js"],"names":["ContactUs","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Header__WEBPACK_IMPORTED_MODULE_8__","this","props","semantic_ui_react__WEBPACK_IMPORTED_MODULE_4__","basic","style","background","semantic_ui_react__WEBPACK_IMPORTED_MODULE_5__","marginBottom","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","size","Section","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","Divider","icon","active","semantic_ui_react__WEBPACK_IMPORTED_MODULE_7__","as","textAlign","className","_components_ContactDetails__WEBPACK_IMPORTED_MODULE_10__","_components_Footer__WEBPACK_IMPORTED_MODULE_9__","React","PureComponent","BreadcrumbDivider","children","content","classes","classnames_default","rest","Object","getUnhandledProps","ElementType","getElementType","isNil_default","react_default","extends_default","lib","isNil","Icon","create","defaultProps","objectSpread_default","autoGenerateKey","handledProps","propTypes","factories","Breadcrumb_BreadcrumbDivider","BreadcrumbSection_BreadcrumbSection","_Component","BreadcrumbSection","_getPrototypeOf2","_this","classCallCheck_default","_len","arguments","length","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","apply","concat","defineProperty_default","assertThisInitialized_default","_this$props","link","onClick","e","invoke_default","inherits_default","createClass_default","key","value","_this$props2","href","classNameBuilders","computeElementType","handleClick","react","Breadcrumb","divider","sections","childElements","each_default","section","index","breadcrumbElement","push","__webpack_exports__","TableBody","Table_TableBody","TableCell","collapsing","disabled","error","negative","positive","selectable","singleLine","verticalAlign","warning","width","Table_TableCell","TableHeader","fullWidth","Table_TableHeader","TableFooter","Table_TableFooter","TableHeaderCell","sorted","Table_TableHeaderCell","TableRow","cellAs","cells","map_default","cell","Table_TableRow","Table","attached","celled","color","columns","compact","definition","fixed","footerRow","headerRow","inverted","padded","renderBodyRow","sortable","stackable","striped","structured","tableData","unstackable","data","Body","Cell","Footer","Header","HeaderCell","Row","Table_Table","ContactDetails","Segment","vertical","padding","Container","fontWeight","fontSize","margin","marginTop","title","height","id","src","frameBorder","scrolling","marginHeight","marginWidth"],"mappings":"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","file":"component---src-pages-contact-us-js-593d31c40d7b63d76153.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\n\nimport get from 'lodash/get';\nimport { Segment, Header, Breadcrumb, Container } from 'semantic-ui-react';\n\n\nimport SiteHeader from '../components/Header';\nimport Footer from '../components/Footer';\nimport ContactDetails from '../components/ContactDetails';\nimport '../../semantic/semantic-dist/semantic.css';\nimport '../assets/custom.css';\n\nclass ContactUs extends React.PureComponent {\n  render() {\n\n    return (\n      <div>\n        <SiteHeader {...this.props} />\n        <Segment basic style={{ background: '#ffffff' }}>\n          <Container>\n            <Segment basic style={{ marginBottom: '0' }}>\n              <Breadcrumb size=\"large\">\n                <Breadcrumb.Section><Link to=\"/\">Home</Link></Breadcrumb.Section>\n                <Breadcrumb.Divider icon=\"right chevron\" />\n                <Breadcrumb.Section active>Contact Us</Breadcrumb.Section>\n              </Breadcrumb>\n            </Segment>\n            <Segment basic>\n              <Header as=\"h1\" textAlign=\"center\" className=\"about-header alferex-header\">\n                Reach Us\n              </Header>\n              <ContactDetails />\n            </Segment>\n          </Container>\n        </Segment>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ContactUs;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A divider sub-component for Breadcrumb component.\n */\n\nfunction BreadcrumbDivider(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(BreadcrumbDivider, props);\n  var ElementType = getElementType(BreadcrumbDivider, props);\n\n  if (!_isNil(icon)) {\n    return Icon.create(icon, {\n      defaultProps: _objectSpread({}, rest, {\n        className: classes\n      }),\n      autoGenerateKey: false\n    });\n  }\n\n  if (!_isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? '/' : children);\n}\n\nBreadcrumbDivider.handledProps = [\"as\", \"children\", \"className\", \"content\", \"icon\"];\nBreadcrumbDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `Icon` component with `divider` class instead of a `div`. */\n  icon: customPropTypes.itemShorthand\n} : {};\nBreadcrumbDivider.create = createShorthandFactory(BreadcrumbDivider, function (icon) {\n  return {\n    icon: icon\n  };\n});\nexport default BreadcrumbDivider;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType, useKeyOnly } from '../../lib';\n/**\n * A section sub-component for Breadcrumb component.\n */\n\nvar BreadcrumbSection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BreadcrumbSection, _Component);\n\n  function BreadcrumbSection() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BreadcrumbSection);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BreadcrumbSection)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeElementType\", function () {\n      var _this$props = _this.props,\n          link = _this$props.link,\n          onClick = _this$props.onClick;\n      if (link || onClick) return 'a';\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      return _invoke(_this.props, 'onClick', e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(BreadcrumbSection, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          active = _this$props2.active,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          content = _this$props2.content,\n          href = _this$props2.href;\n      var classes = cx(useKeyOnly(active, 'active'), 'section', className);\n      var rest = getUnhandledProps(BreadcrumbSection, this.props);\n      var ElementType = getElementType(BreadcrumbSection, this.props, this.computeElementType);\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n  }]);\n\n  return BreadcrumbSection;\n}(Component);\n\n_defineProperty(BreadcrumbSection, \"handledProps\", [\"active\", \"as\", \"children\", \"className\", \"content\", \"href\", \"link\", \"onClick\"]);\n\nexport { BreadcrumbSection as default };\nBreadcrumbSection.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Style as the currently active section. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: customPropTypes.every([customPropTypes.disallow(['link']), PropTypes.string]),\n\n  /** Render as an `a` tag instead of a `div`. */\n  link: customPropTypes.every([customPropTypes.disallow(['href']), PropTypes.bool]),\n\n  /**\n   * Called on click. When passed, the component will render as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func\n} : {};\nBreadcrumbSection.create = createShorthandFactory(BreadcrumbSection, function (content) {\n  return {\n    content: content,\n    link: true\n  };\n});","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _each from \"lodash/each\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getUnhandledProps, getElementType, SUI } from '../../lib';\nimport BreadcrumbDivider from './BreadcrumbDivider';\nimport BreadcrumbSection from './BreadcrumbSection';\n/**\n * A breadcrumb is used to show hierarchy between content.\n */\n\nfunction Breadcrumb(props) {\n  var children = props.children,\n      className = props.className,\n      divider = props.divider,\n      icon = props.icon,\n      sections = props.sections,\n      size = props.size;\n  var classes = cx('ui', size, 'breadcrumb', className);\n  var rest = getUnhandledProps(Breadcrumb, props);\n  var ElementType = getElementType(Breadcrumb, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var childElements = [];\n\n  _each(sections, function (section, index) {\n    // section\n    var breadcrumbElement = BreadcrumbSection.create(section);\n    childElements.push(breadcrumbElement); // divider\n\n    if (index !== sections.length - 1) {\n      var key = \"\".concat(breadcrumbElement.key, \"_divider\") || JSON.stringify(section);\n      childElements.push(BreadcrumbDivider.create({\n        content: divider,\n        icon: icon,\n        key: key\n      }));\n    }\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childElements);\n}\n\nBreadcrumb.handledProps = [\"as\", \"children\", \"className\", \"divider\", \"icon\", \"sections\", \"size\"];\nBreadcrumb.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content of the Breadcrumb.Divider. */\n  divider: customPropTypes.every([customPropTypes.disallow(['icon']), customPropTypes.contentShorthand]),\n\n  /** For use with the sections prop. Render as an `Icon` component with `divider` class instead of a `div` in\n   *  Breadcrumb.Divider. */\n  icon: customPropTypes.every([customPropTypes.disallow(['divider']), customPropTypes.itemShorthand]),\n\n  /** Shorthand array of props for Breadcrumb.Section. */\n  sections: customPropTypes.collectionShorthand,\n\n  /** Size of Breadcrumb. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium'))\n} : {};\nBreadcrumb.Divider = BreadcrumbDivider;\nBreadcrumb.Section = BreadcrumbSection;\nexport default Breadcrumb;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n\nfunction TableBody(props) {\n  var children = props.children,\n      className = props.className;\n  var classes = cx(className);\n  var rest = getUnhandledProps(TableBody, props);\n  var ElementType = getElementType(TableBody, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), children);\n}\n\nTableBody.handledProps = [\"as\", \"children\", \"className\"];\nTableBody.defaultProps = {\n  as: 'tbody'\n};\nTableBody.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string\n} : {};\nexport default TableBody;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A table row can have cells.\n */\n\nfunction TableCell(props) {\n  var active = props.active,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      content = props.content,\n      disabled = props.disabled,\n      error = props.error,\n      icon = props.icon,\n      negative = props.negative,\n      positive = props.positive,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning,\n      width = props.width;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(width, 'wide'), className);\n  var rest = getUnhandledProps(TableCell, props);\n  var ElementType = getElementType(TableCell, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), Icon.create(icon), content);\n}\n\nTableCell.handledProps = [\"active\", \"as\", \"children\", \"className\", \"collapsing\", \"content\", \"disabled\", \"error\", \"icon\", \"negative\", \"positive\", \"selectable\", \"singleLine\", \"textAlign\", \"verticalAlign\", \"warning\", \"width\"];\nTableCell.defaultProps = {\n  as: 'td'\n};\nTableCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A cell can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A cell can be collapsing so that it only uses as much space as required. */\n  collapsing: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A cell can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A cell may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** Add an Icon by name, props object, or pass an <Icon /> */\n  icon: customPropTypes.itemShorthand,\n\n  /** A cell may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A cell may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A cell can be selectable. */\n  selectable: PropTypes.bool,\n\n  /** A cell can specify that its contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table cell can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table cell can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A cell may warn a user. */\n  warning: PropTypes.bool,\n\n  /** A table can specify the width of individual columns independently. */\n  width: PropTypes.oneOf(SUI.WIDTHS)\n} : {};\nTableCell.create = createShorthandFactory(TableCell, function (content) {\n  return {\n    content: content\n  };\n});\nexport default TableCell;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, useKeyOnly } from '../../lib';\n/**\n * A table can have a header.\n */\n\nfunction TableHeader(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fullWidth = props.fullWidth;\n  var classes = cx(useKeyOnly(fullWidth, 'full-width'), className);\n  var rest = getUnhandledProps(TableHeader, props);\n  var ElementType = getElementType(TableHeader, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nTableHeader.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fullWidth\"];\nTableHeader.defaultProps = {\n  as: 'thead'\n};\nTableHeader.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A definition table can have a full width header or footer, filling in the gap left by the first column. */\n  fullWidth: PropTypes.bool\n} : {};\nexport default TableHeader;","import _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport { customPropTypes, getUnhandledProps } from '../../lib';\nimport TableHeader from './TableHeader';\n/**\n * A table can have a footer.\n */\n\nfunction TableFooter(props) {\n  var as = props.as;\n  var rest = getUnhandledProps(TableFooter, props);\n  return React.createElement(TableHeader, _extends({}, rest, {\n    as: as\n  }));\n}\n\nTableFooter.handledProps = [\"as\"];\nTableFooter.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as\n} : {};\nTableFooter.defaultProps = {\n  as: 'tfoot'\n};\nexport default TableFooter;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { customPropTypes, getUnhandledProps, useValueAndKey } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have a header cell.\n */\n\nfunction TableHeaderCell(props) {\n  var as = props.as,\n      className = props.className,\n      sorted = props.sorted;\n  var classes = cx(useValueAndKey(sorted, 'sorted'), className);\n  var rest = getUnhandledProps(TableHeaderCell, props);\n  return React.createElement(TableCell, _extends({}, rest, {\n    as: as,\n    className: classes\n  }));\n}\n\nTableHeaderCell.handledProps = [\"as\", \"className\", \"sorted\"];\nTableHeaderCell.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A header cell can be sorted in ascending or descending order. */\n  sorted: PropTypes.oneOf(['ascending', 'descending'])\n} : {};\nTableHeaderCell.defaultProps = {\n  as: 'th'\n};\nexport default TableHeaderCell;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp, useVerticalAlignProp } from '../../lib';\nimport TableCell from './TableCell';\n/**\n * A table can have rows.\n */\n\nfunction TableRow(props) {\n  var active = props.active,\n      cellAs = props.cellAs,\n      cells = props.cells,\n      children = props.children,\n      className = props.className,\n      disabled = props.disabled,\n      error = props.error,\n      negative = props.negative,\n      positive = props.positive,\n      textAlign = props.textAlign,\n      verticalAlign = props.verticalAlign,\n      warning = props.warning;\n  var classes = cx(useKeyOnly(active, 'active'), useKeyOnly(disabled, 'disabled'), useKeyOnly(error, 'error'), useKeyOnly(negative, 'negative'), useKeyOnly(positive, 'positive'), useKeyOnly(warning, 'warning'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), className);\n  var rest = getUnhandledProps(TableRow, props);\n  var ElementType = getElementType(TableRow, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), _map(cells, function (cell) {\n    return TableCell.create(cell, {\n      defaultProps: {\n        as: cellAs\n      }\n    });\n  }));\n}\n\nTableRow.handledProps = [\"active\", \"as\", \"cellAs\", \"cells\", \"children\", \"className\", \"disabled\", \"error\", \"negative\", \"positive\", \"textAlign\", \"verticalAlign\", \"warning\"];\nTableRow.defaultProps = {\n  as: 'tr',\n  cellAs: 'td'\n};\nTableRow.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** A row can be active or selected by a user. */\n  active: PropTypes.bool,\n\n  /** An element type to render as (string or function). */\n  cellAs: customPropTypes.as,\n\n  /** Shorthand array of props for TableCell. */\n  cells: customPropTypes.collectionShorthand,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A row can be disabled. */\n  disabled: PropTypes.bool,\n\n  /** A row may call attention to an error or a negative value. */\n  error: PropTypes.bool,\n\n  /** A row may let a user know whether a value is bad. */\n  negative: PropTypes.bool,\n\n  /** A row may let a user know whether a value is good. */\n  positive: PropTypes.bool,\n\n  /** A table row can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table row can adjust its vertical alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS),\n\n  /** A row may warn a user. */\n  warning: PropTypes.bool\n} : {};\nTableRow.create = createShorthandFactory(TableRow, function (cells) {\n  return {\n    cells: cells\n  };\n});\nexport default TableRow;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _map from \"lodash/map\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useVerticalAlignProp, useWidthProp } from '../../lib';\nimport TableBody from './TableBody';\nimport TableCell from './TableCell';\nimport TableFooter from './TableFooter';\nimport TableHeader from './TableHeader';\nimport TableHeaderCell from './TableHeaderCell';\nimport TableRow from './TableRow';\n/**\n * A table displays a collections of data grouped into rows.\n */\n\nfunction Table(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      celled = props.celled,\n      children = props.children,\n      className = props.className,\n      collapsing = props.collapsing,\n      color = props.color,\n      columns = props.columns,\n      compact = props.compact,\n      definition = props.definition,\n      fixed = props.fixed,\n      footerRow = props.footerRow,\n      headerRow = props.headerRow,\n      inverted = props.inverted,\n      padded = props.padded,\n      renderBodyRow = props.renderBodyRow,\n      selectable = props.selectable,\n      singleLine = props.singleLine,\n      size = props.size,\n      sortable = props.sortable,\n      stackable = props.stackable,\n      striped = props.striped,\n      structured = props.structured,\n      tableData = props.tableData,\n      textAlign = props.textAlign,\n      unstackable = props.unstackable,\n      verticalAlign = props.verticalAlign;\n  var classes = cx('ui', color, size, useKeyOnly(celled, 'celled'), useKeyOnly(collapsing, 'collapsing'), useKeyOnly(definition, 'definition'), useKeyOnly(fixed, 'fixed'), useKeyOnly(inverted, 'inverted'), useKeyOnly(selectable, 'selectable'), useKeyOnly(singleLine, 'single line'), useKeyOnly(sortable, 'sortable'), useKeyOnly(stackable, 'stackable'), useKeyOnly(striped, 'striped'), useKeyOnly(structured, 'structured'), useKeyOnly(unstackable, 'unstackable'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(basic, 'basic'), useKeyOrValueAndKey(compact, 'compact'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useVerticalAlignProp(verticalAlign), useWidthProp(columns, 'column'), 'table', className);\n  var rest = getUnhandledProps(Table, props);\n  var ElementType = getElementType(Table, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), headerRow && React.createElement(TableHeader, null, TableRow.create(headerRow, {\n    defaultProps: {\n      cellAs: 'th'\n    }\n  })), React.createElement(TableBody, null, renderBodyRow && _map(tableData, function (data, index) {\n    return TableRow.create(renderBodyRow(data, index));\n  })), footerRow && React.createElement(TableFooter, null, TableRow.create(footerRow)));\n}\n\nTable.handledProps = [\"as\", \"attached\", \"basic\", \"celled\", \"children\", \"className\", \"collapsing\", \"color\", \"columns\", \"compact\", \"definition\", \"fixed\", \"footerRow\", \"headerRow\", \"inverted\", \"padded\", \"renderBodyRow\", \"selectable\", \"singleLine\", \"size\", \"sortable\", \"stackable\", \"striped\", \"structured\", \"tableData\", \"textAlign\", \"unstackable\", \"verticalAlign\"];\nTable.defaultProps = {\n  as: 'table'\n};\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Attach table to other content */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A table can reduce its complexity to increase readability. */\n  basic: PropTypes.oneOfType([PropTypes.oneOf(['very']), PropTypes.bool]),\n\n  /** A table may be divided each row into separate cells. */\n  celled: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A table can be collapsing, taking up only as much space as its rows. */\n  collapsing: PropTypes.bool,\n\n  /** A table can be given a color to distinguish it from other tables. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A table can specify its column count to divide its content evenly. */\n  columns: PropTypes.oneOf(SUI.WIDTHS),\n\n  /** A table may sometimes need to be more compact to make more rows visible at a time. */\n  compact: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A table may be formatted to emphasize a first column that defines a rows content. */\n  definition: PropTypes.bool,\n\n  /**\n   * A table can use fixed a special faster form of table rendering that does not resize table cells based on content\n   */\n  fixed: PropTypes.bool,\n\n  /** Shorthand for a TableRow to be placed within Table.Footer. */\n  footerRow: customPropTypes.itemShorthand,\n\n  /** Shorthand for a TableRow to be placed within Table.Header. */\n  headerRow: customPropTypes.itemShorthand,\n\n  /** A table's colors can be inverted. */\n  inverted: PropTypes.bool,\n\n  /** A table may sometimes need to be more padded for legibility. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /**\n   * Mapped over `tableData` and should return shorthand for each Table.Row to be placed within Table.Body.\n   *\n   * @param {*} data - An element in the `tableData` array.\n   * @param {number} index - The index of the current element in `tableData`.\n   * @returns {*} Shorthand for a Table.Row.\n   */\n  renderBodyRow: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['tableData']), PropTypes.func]),\n\n  /** A table can have its rows appear selectable. */\n  selectable: PropTypes.bool,\n\n  /** A table can specify that its cell contents should remain on a single line and not wrap. */\n  singleLine: PropTypes.bool,\n\n  /** A table can also be small or large. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'mini', 'tiny', 'medium', 'big', 'huge', 'massive')),\n\n  /** A table may allow a user to sort contents by clicking on a table header. */\n  sortable: PropTypes.bool,\n\n  /** A table can specify how it stacks table content responsively. */\n  stackable: PropTypes.bool,\n\n  /** A table can stripe alternate rows of content with a darker color to increase contrast. */\n  striped: PropTypes.bool,\n\n  /** A table can be formatted to display complex structured data. */\n  structured: PropTypes.bool,\n\n  /** Data to be passed to the renderBodyRow function. */\n  tableData: customPropTypes.every([customPropTypes.disallow(['children']), customPropTypes.demand(['renderBodyRow']), PropTypes.array]),\n\n  /** A table can adjust its text alignment. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** A table can specify how it stacks table content responsively. */\n  unstackable: PropTypes.bool,\n\n  /** A table can adjust its text alignment. */\n  verticalAlign: PropTypes.oneOf(SUI.VERTICAL_ALIGNMENTS)\n} : {};\nTable.Body = TableBody;\nTable.Cell = TableCell;\nTable.Footer = TableFooter;\nTable.Header = TableHeader;\nTable.HeaderCell = TableHeaderCell;\nTable.Row = TableRow;\nexport default Table;","/**\n *\n * ContactDetails\n *\n */\n\nimport React from 'react';\nimport {\n  Header, Segment, Container, Table,\n} from 'semantic-ui-react';\n\nimport '../../semantic/semantic-dist/semantic.css';\nimport '../assets/custom.css';\n\n\nclass ContactDetails extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function\n  render() {\n    return (\n      <Segment vertical style={{ padding: '5em 0' }}>\n        <Container>\n          <Header as=\"h1\" textAlign=\"center\" style={{ fontWeight: '400', fontSize: '2em' }} className=\"about-header\">\n            Reach us via any of these mediums\n          </Header>\n          <Table basic=\"very\" celled collapsing style={{ margin: 'auto' }}>\n            <Table.Body>\n              <Table.Row>\n                <Table.Cell>\n                  <Header as=\"h4\" color=\"grey\">\n                    Email\n                  </Header>\n                </Table.Cell>\n                <Table.Cell>\n                  <Header as=\"h4\">\n                    <a href=\"mailto:info@alferex.com\">info@alferex.com</a>\n                  </Header>\n                </Table.Cell>\n              </Table.Row>\n              <Table.Row>\n                <Table.Cell>\n                  <Header as=\"h4\" color=\"grey\">\n                    Mobile\n                  </Header>\n                </Table.Cell>\n                <Table.Cell>\n                  <Header as=\"h4\">\n                    <a href=\"tel:+918971895463\">+91 8971895463</a>\n                  </Header>\n                </Table.Cell>\n              </Table.Row>\n            </Table.Body>\n          </Table>\n          <div style={{ marginTop: '2em' }}>\n            <Header as=\"h2\" textAlign=\"center\" style={{ fontWeight: '400', fontSize: '1.8em' }} className=\"about-header\">\n              Or send us a post like good ol&apos; days\n            </Header>\n            <Header as=\"h4\" color=\"grey\" textAlign=\"center\">\n              Registered Address\n            </Header>\n            <Header as=\"h4\" textAlign=\"center\">\n              #20, Shri Hari Villas, Near Adani Circle,\n              <br />\n              SP Ring Road, Ahmedabad - 382445\n            </Header>\n            <Header as=\"h4\" color=\"grey\" textAlign=\"center\">\n              Google Maps\n            </Header>\n            <div className=\"mapouter\" style={{ textAlign: 'center' }}>\n              <div className=\"gmap_canvas\">\n                <iframe\n                  title=\"alferex_gmaps\"\n                  width=\"260\"\n                  height=\"260\"\n                  id=\"gmap_canvas\"\n                  src=\"https://maps.google.com/maps?q=20%2C%20Shree%20Hari%20Villas%20Ahmedabad&t=&z=13&ie=UTF8&iwloc=&output=embed\"\n                  frameBorder=\"0\"\n                  scrolling=\"no\"\n                  marginHeight=\"0\"\n                  marginWidth=\"0\"\n                >\n                Loading...\n                </iframe>\n              </div>\n            </div>\n          </div>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport default ContactDetails;"],"sourceRoot":""}