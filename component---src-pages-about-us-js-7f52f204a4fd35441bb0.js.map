{"version":3,"sources":["webpack:///./src/pages/about-us.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/BreadcrumbDivider.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/BreadcrumbSection.js","webpack:///./node_modules/semantic-ui-react/dist/es/collections/Breadcrumb/Breadcrumb.js","webpack:///./src/components/AboutAlferex.js"],"names":["AboutUs","render","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_Header__WEBPACK_IMPORTED_MODULE_7__","this","props","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","basic","style","background","semantic_ui_react__WEBPACK_IMPORTED_MODULE_4__","marginBottom","semantic_ui_react__WEBPACK_IMPORTED_MODULE_5__","size","Section","link","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","Divider","icon","active","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","as","textAlign","className","_components_AboutAlferex__WEBPACK_IMPORTED_MODULE_9__","_components_Footer__WEBPACK_IMPORTED_MODULE_8__","React","PureComponent","BreadcrumbDivider","children","content","classes","classnames_default","rest","Object","getUnhandledProps","ElementType","getElementType","isNil_default","react_default","extends_default","lib","isNil","Icon","create","defaultProps","objectSpread_default","autoGenerateKey","handledProps","propTypes","factories","Breadcrumb_BreadcrumbDivider","BreadcrumbSection_BreadcrumbSection","_Component","BreadcrumbSection","_getPrototypeOf2","_this","classCallCheck_default","_len","arguments","length","args","Array","_key","possibleConstructorReturn_default","getPrototypeOf_default","call","apply","concat","defineProperty_default","assertThisInitialized_default","_this$props","onClick","e","invoke_default","inherits_default","createClass_default","key","value","_this$props2","href","classNameBuilders","computeElementType","handleClick","react","Breadcrumb","divider","sections","childElements","each_default","section","index","breadcrumbElement","push","__webpack_exports__","AboutAlferex","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","padding","fontWeight","fontSize","lineHeight","color"],"mappings":"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","file":"component---src-pages-about-us-js-7f52f204a4fd35441bb0.js","sourcesContent":["import React from 'react';\nimport { Link } from 'gatsby';\nimport { Segment, Header, Breadcrumb, Container } from 'semantic-ui-react';\n\n\nimport SiteHeader from '../components/Header';\nimport Footer from '../components/Footer';\nimport AboutAlferex from '../components/AboutAlferex';\nimport '../../semantic/semantic-dist/semantic.css';\nimport '../assets/custom.css';\n\nclass AboutUs extends React.PureComponent {\n  render() {\n\n    return (\n      <div>\n        <SiteHeader {...this.props} />\n        <Segment basic style={{ background: '#ffffff' }}>\n          <Container>\n            <Segment basic style={{ marginBottom: '0' }}>\n              <Breadcrumb size=\"large\">\n                <Breadcrumb.Section link><Link to=\"/\">Home</Link></Breadcrumb.Section>\n                <Breadcrumb.Divider icon=\"right chevron\" />\n                <Breadcrumb.Section active>About Us</Breadcrumb.Section>\n              </Breadcrumb>\n            </Segment>\n            <Segment basic>\n              <Header as=\"h1\" textAlign=\"center\" className=\"about-header alferex-header\">\n                Mission Statement\n              </Header>\n              <AboutAlferex />\n            </Segment>\n          </Container>\n        </Segment>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default AboutUs;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread\";\nimport _isNil from \"lodash/isNil\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType } from '../../lib';\nimport Icon from '../../elements/Icon';\n/**\n * A divider sub-component for Breadcrumb component.\n */\n\nfunction BreadcrumbDivider(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      icon = props.icon;\n  var classes = cx('divider', className);\n  var rest = getUnhandledProps(BreadcrumbDivider, props);\n  var ElementType = getElementType(BreadcrumbDivider, props);\n\n  if (!_isNil(icon)) {\n    return Icon.create(icon, {\n      defaultProps: _objectSpread({}, rest, {\n        className: classes\n      }),\n      autoGenerateKey: false\n    });\n  }\n\n  if (!_isNil(content)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), content);\n  }\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? '/' : children);\n}\n\nBreadcrumbDivider.handledProps = [\"as\", \"children\", \"className\", \"content\", \"icon\"];\nBreadcrumbDivider.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `Icon` component with `divider` class instead of a `div`. */\n  icon: customPropTypes.itemShorthand\n} : {};\nBreadcrumbDivider.create = createShorthandFactory(BreadcrumbDivider, function (icon) {\n  return {\n    icon: icon\n  };\n});\nexport default BreadcrumbDivider;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _invoke from \"lodash/invoke\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { childrenUtils, createShorthandFactory, customPropTypes, getUnhandledProps, getElementType, useKeyOnly } from '../../lib';\n/**\n * A section sub-component for Breadcrumb component.\n */\n\nvar BreadcrumbSection =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(BreadcrumbSection, _Component);\n\n  function BreadcrumbSection() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BreadcrumbSection);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BreadcrumbSection)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"computeElementType\", function () {\n      var _this$props = _this.props,\n          link = _this$props.link,\n          onClick = _this$props.onClick;\n      if (link || onClick) return 'a';\n    });\n\n    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), \"handleClick\", function (e) {\n      return _invoke(_this.props, 'onClick', e, _this.props);\n    });\n\n    return _this;\n  }\n\n  _createClass(BreadcrumbSection, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          active = _this$props2.active,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          content = _this$props2.content,\n          href = _this$props2.href;\n      var classes = cx(useKeyOnly(active, 'active'), 'section', className);\n      var rest = getUnhandledProps(BreadcrumbSection, this.props);\n      var ElementType = getElementType(BreadcrumbSection, this.props, this.computeElementType);\n      return React.createElement(ElementType, _extends({}, rest, {\n        className: classes,\n        href: href,\n        onClick: this.handleClick\n      }), childrenUtils.isNil(children) ? content : children);\n    }\n  }]);\n\n  return BreadcrumbSection;\n}(Component);\n\n_defineProperty(BreadcrumbSection, \"handledProps\", [\"active\", \"as\", \"children\", \"className\", \"content\", \"href\", \"link\", \"onClick\"]);\n\nexport { BreadcrumbSection as default };\nBreadcrumbSection.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Style as the currently active section. */\n  active: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Render as an `a` tag instead of a `div` and adds the href attribute. */\n  href: customPropTypes.every([customPropTypes.disallow(['link']), PropTypes.string]),\n\n  /** Render as an `a` tag instead of a `div`. */\n  link: customPropTypes.every([customPropTypes.disallow(['href']), PropTypes.bool]),\n\n  /**\n   * Called on click. When passed, the component will render as an `a`\n   * tag by default instead of a `div`.\n   *\n   * @param {SyntheticEvent} event - React's original SyntheticEvent.\n   * @param {object} data - All props.\n   */\n  onClick: PropTypes.func\n} : {};\nBreadcrumbSection.create = createShorthandFactory(BreadcrumbSection, function (content) {\n  return {\n    content: content,\n    link: true\n  };\n});","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport _each from \"lodash/each\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getUnhandledProps, getElementType, SUI } from '../../lib';\nimport BreadcrumbDivider from './BreadcrumbDivider';\nimport BreadcrumbSection from './BreadcrumbSection';\n/**\n * A breadcrumb is used to show hierarchy between content.\n */\n\nfunction Breadcrumb(props) {\n  var children = props.children,\n      className = props.className,\n      divider = props.divider,\n      icon = props.icon,\n      sections = props.sections,\n      size = props.size;\n  var classes = cx('ui', size, 'breadcrumb', className);\n  var rest = getUnhandledProps(Breadcrumb, props);\n  var ElementType = getElementType(Breadcrumb, props);\n\n  if (!childrenUtils.isNil(children)) {\n    return React.createElement(ElementType, _extends({}, rest, {\n      className: classes\n    }), children);\n  }\n\n  var childElements = [];\n\n  _each(sections, function (section, index) {\n    // section\n    var breadcrumbElement = BreadcrumbSection.create(section);\n    childElements.push(breadcrumbElement); // divider\n\n    if (index !== sections.length - 1) {\n      var key = \"\".concat(breadcrumbElement.key, \"_divider\") || JSON.stringify(section);\n      childElements.push(BreadcrumbDivider.create({\n        content: divider,\n        icon: icon,\n        key: key\n      }));\n    }\n  });\n\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childElements);\n}\n\nBreadcrumb.handledProps = [\"as\", \"children\", \"className\", \"divider\", \"icon\", \"sections\", \"size\"];\nBreadcrumb.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: customPropTypes.as,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content of the Breadcrumb.Divider. */\n  divider: customPropTypes.every([customPropTypes.disallow(['icon']), customPropTypes.contentShorthand]),\n\n  /** For use with the sections prop. Render as an `Icon` component with `divider` class instead of a `div` in\n   *  Breadcrumb.Divider. */\n  icon: customPropTypes.every([customPropTypes.disallow(['divider']), customPropTypes.itemShorthand]),\n\n  /** Shorthand array of props for Breadcrumb.Section. */\n  sections: customPropTypes.collectionShorthand,\n\n  /** Size of Breadcrumb. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium'))\n} : {};\nBreadcrumb.Divider = BreadcrumbDivider;\nBreadcrumb.Section = BreadcrumbSection;\nexport default Breadcrumb;","/**\n *\n * AboutAlferex\n *\n */\n\nimport React from 'react';\nimport {\n  Header, Segment, Container,\n} from 'semantic-ui-react';\n\nimport '../../semantic/semantic-dist/semantic.css';\nimport '../assets/custom.css';\n\n\nclass AboutAlferex extends React.PureComponent { // eslint-disable-line react/prefer-stateless-function\n  render() {\n    return (\n      <Segment basic style={{ padding: '5em 0' }}>\n        <Container>\n          <Header as=\"h1\" textAlign=\"center\" style={{ fontWeight: '400', fontSize: '2em' }} className=\"about-header\">\n            Our mission is to push the limits of precision and accuracy\n          </Header>\n          <Header as=\"h2\" textAlign=\"center\" style={{ fontWeight: '400', fontSize: '1.6em', lineHeight: '1.4' }} color=\"grey\">\n            We are an industrial technology company that manufactures heavy-duty military grade machinery equipments of unmatched precision and accuracy. The continuous innovation in our production lines enables us to adapt to the ever changing products of the future.\n          </Header>\n        </Container>\n      </Segment>\n    );\n  }\n}\n\nexport default AboutAlferex;\n"],"sourceRoot":""}